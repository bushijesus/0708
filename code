//
// Created by Administrator on 2023/7/8.
//

/*

// 二叉树的链式存储

#include <stdio.h>
#include <stdlib.h>

// 定义一个二叉树
typedef struct BiTree{
    int data;
    struct BiTree* left;
    struct BiTree* right;
}BiTree;

// 创建新的二叉树结点
BiTree * createBiNode(int data){
    BiTree* NewNode = (BiTree*) malloc(sizeof(BiTree));
    if(NewNode == NULL)
        return NULL;      // 内存分配失败
    NewNode->data = data;
    NewNode->left = NULL;
    NewNode->right = NULL;
    return NewNode;
}

// 插入结点到二叉树
BiTree * insertBiNode(BiTree * root, int data){
    if(root == NULL){
        return createBiNode(data);
    }
    if(data < root->data){
        root->left = insertBiNode(root->left, data);
    }
    else if(data > root->data){
        root->right = insertBiNode(root->right, data);
    }
    else{
        perror("err data\n");
        return NULL;
    }
    return root;
}

// 先序遍历
void preOrder(BiTree * root){
    if(root != NULL){
        printf("%d ",root->data);
        preOrder(root->left);
        preOrder(root->right);
    }
}

int main(){
    BiTree* BT = createBiNode(1);
    insertBiNode(BT, 4);
    insertBiNode(BT, 3);
    insertBiNode(BT, 2);
    preOrder(BT);
}

*/


/*

// 二叉树的顺序存储

#include <stdio.h>

#define MAXSIZE 100

// 定义二叉树
int BiTree[MAXSIZE];

// 初始化二叉树
void initTree(int tree[]){
    for (int i = 0; i < MAXSIZE; ++i) {
        tree[i] = -1;
    }
}

// 插入结点
void insertBiTree(int index, int data){
    BiTree[index] = data;
}

// 获取结点值
int getNodeValue(int tree[], int index){
    return tree[index];
}

// 先序遍历二叉树
void preOrderBiTree(int index){
    if(BiTree[index] != -1){
        // 遍历左子树
        preOrderBiTree(2 * index + 1);
        // 遍历右子树
        preOrderBiTree(2 * index + 2);
    }
}
int main(){

}

*/



// 二叉树的层序遍历（借助链式队列）
#include <stdio.h>
#include <stdlib.h>

// 二叉树节点结构
struct BinaryTreeNode {
    int value;
    struct BinaryTreeNode* left;
    struct BinaryTreeNode* right;
};

// 链式队列节点结构
struct QueueNode {
    struct BinaryTreeNode* data;
    struct QueueNode* next;
};

// 链式队列结构
struct Queue {
    struct QueueNode* front;
    struct QueueNode* rear;
};

// 创建二叉树节点
struct BinaryTreeNode* createNode(int value) {
    struct BinaryTreeNode* newNode = (struct BinaryTreeNode*)malloc(sizeof(struct BinaryTreeNode));
    if (newNode == NULL) {
        printf("内存分配失败！");
        exit(1);
    }
    newNode->value = value;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// 初始化队列
void initQueue(struct Queue* q) {
    q->front = NULL;
    q->rear = NULL;
}

// 判断队列是否为空
int isEmpty(struct Queue* q) {
    return (q->front == NULL);
}

// 入队
void enqueue(struct Queue* q, struct BinaryTreeNode* value) {
    struct QueueNode* newNode = (struct QueueNode*)malloc(sizeof(struct QueueNode));
    if (newNode == NULL) {
        printf("内存分配失败！");
        exit(1);
    }
    newNode->data = value;
    newNode->next = NULL;
    if (isEmpty(q)) {
        q->front = newNode;
        q->rear = newNode;
    }
    else {
        q->rear->next = newNode;
        q->rear = newNode;
    }
}

// 出队
struct BinaryTreeNode* dequeue(struct Queue* q) {
    if (isEmpty(q)) {
        return NULL;
    }
    struct QueueNode* temp = q->front;
    struct BinaryTreeNode* value = temp->data;
    q->front = q->front->next;
    free(temp);
    if (q->front == NULL) {
        q->rear = NULL;
    }
    return value;
}

// 层序遍历
void levelOrderTraversal(struct BinaryTreeNode* root) {
    if (root == NULL) {
        return;
    }

    struct Queue q;
    initQueue(&q);
    enqueue(&q, root);

    while (!isEmpty(&q)) {
        struct BinaryTreeNode* node = dequeue(&q);
        printf("%d ", node->value);

        if (node->left != NULL) {
            enqueue(&q, node->left);
        }
        if (node->right != NULL) {
            enqueue(&q, node->right);
        }
    }
}

int main() {
    struct BinaryTreeNode* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    printf("二叉树的层序遍历结果: ");
    levelOrderTraversal(root);

    return 0;
}
